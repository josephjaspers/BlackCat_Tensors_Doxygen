var searchData=
[
  ['back_5fpropagation',['back_propagation',['../structbc_1_1nn_1_1Layer__Manager.html#ae3ce714c4ab44c3b0422e4f496c41467',1,'bc::nn::Layer_Manager::back_propagation()'],['../structbc_1_1nn_1_1Convolution.html#afc07b8db150a19ecd72ad285009f6232',1,'bc::nn::Convolution::back_propagation()'],['../structbc_1_1nn_1_1FeedForward.html#a3f712a67e12f12634ecd6ff40d7d0727',1,'bc::nn::FeedForward::back_propagation()'],['../structbc_1_1nn_1_1Flatten.html#aec50c8f60d24fbac0cbd9fe98d4a3d1d',1,'bc::nn::Flatten::back_propagation()'],['../structbc_1_1nn_1_1Logging__Output__Layer.html#aed0550f4b95ebea0fe4182d316cf58ef',1,'bc::nn::Logging_Output_Layer::back_propagation()'],['../structbc_1_1nn_1_1LSTM.html#a15dc1ca2bf577ae2a22c01f1f81771e4',1,'bc::nn::LSTM::back_propagation()'],['../structbc_1_1nn_1_1Max__Pooling.html#a77c095e97891545afd2a9d8ade1dc2a3',1,'bc::nn::Max_Pooling::back_propagation()'],['../structbc_1_1nn_1_1Output__Layer.html#ae17199c4928823b57fea1f9549dc9c9b',1,'bc::nn::Output_Layer::back_propagation()'],['../structbc_1_1nn_1_1Polymorphic__Layer__Base.html#ae68fb249544a51c79be7aca6fb4a0727',1,'bc::nn::Polymorphic_Layer_Base::back_propagation()'],['../structbc_1_1nn_1_1Recurrent.html#ac30d6edec8e456e06bc967acfc87f07e',1,'bc::nn::Recurrent::back_propagation()'],['../structbc_1_1nn_1_1SoftMax.html#a61b74940e2e55753f7409cfd4af87c5c',1,'bc::nn::SoftMax::back_propagation()'],['../structbc_1_1nn_1_1Function.html#a3e07048b3c63a0625f447d37002e49b2',1,'bc::nn::Function::back_propagation()'],['../structbc_1_1nn_1_1NeuralNetwork.html#ab1cda131c79efc9b13d87a0f323c1752',1,'bc::nn::NeuralNetwork::back_propagation()'],['../structbc_1_1nn_1_1Polymorphic__Layer__Base.html#ae68fb249544a51c79be7aca6fb4a0727',1,'bc::nn::Polymorphic_Layer_Base::back_propagation()']]],
  ['batch_5fsize',['batch_size',['../structbc_1_1nn_1_1Layer__Base.html#a2602afd12a449c9d1200254b9fce14f7',1,'bc::nn::Layer_Base::batch_size()'],['../structbc_1_1nn_1_1Polymorphic__Layer__Base.html#a107ffea414142eb7be7aa45f0387f966',1,'bc::nn::Polymorphic_Layer_Base::batch_size()'],['../structbc_1_1nn_1_1NeuralNetwork.html#a94b394fdf99d41f16ce04585f939927f',1,'bc::nn::NeuralNetwork::batch_size()'],['../structbc_1_1nn_1_1Polymorphic__Layer__Base.html#a107ffea414142eb7be7aa45f0387f966',1,'bc::nn::Polymorphic_Layer_Base::batch_size()']]],
  ['batched_5finput_5fshape',['batched_input_shape',['../structbc_1_1nn_1_1Polymorphic__Layer__Base.html#a362477a099ec16eeafcda0527ca711b2',1,'bc::nn::Polymorphic_Layer_Base::batched_input_shape() const'],['../structbc_1_1nn_1_1Polymorphic__Layer__Base.html#a362477a099ec16eeafcda0527ca711b2',1,'bc::nn::Polymorphic_Layer_Base::batched_input_shape() const']]],
  ['batched_5finput_5fsize',['batched_input_size',['../structbc_1_1nn_1_1Layer__Base.html#a8beff5b62d525ca28e67d0c852e8a341',1,'bc::nn::Layer_Base']]],
  ['batched_5flearning_5frate',['batched_learning_rate',['../structbc_1_1nn_1_1Polymorphic__Layer__Base.html#a4a592f412e5a7908293385d2e1f567d5',1,'bc::nn::Polymorphic_Layer_Base::batched_learning_rate() const'],['../structbc_1_1nn_1_1Polymorphic__Layer__Base.html#a4a592f412e5a7908293385d2e1f567d5',1,'bc::nn::Polymorphic_Layer_Base::batched_learning_rate() const']]],
  ['batched_5foutput_5fshape',['batched_output_shape',['../structbc_1_1nn_1_1Polymorphic__Layer__Base.html#a93154c06cdfce8282d48a114055d3e2a',1,'bc::nn::Polymorphic_Layer_Base::batched_output_shape() const'],['../structbc_1_1nn_1_1Polymorphic__Layer__Base.html#a93154c06cdfce8282d48a114055d3e2a',1,'bc::nn::Polymorphic_Layer_Base::batched_output_shape() const']]],
  ['batched_5foutput_5fsize',['batched_output_size',['../structbc_1_1nn_1_1Layer__Base.html#ac4e28faccc21e1d9510821bcde89ed42',1,'bc::nn::Layer_Base']]],
  ['bc_5fassert',['bc_assert',['../namespacebc.html#abd3d44d6c60359e43ce37fb8983291bf',1,'bc']]],
  ['bc_5fcuda_5fassert',['BC_cuda_assert',['../namespacebc.html#ae9d727e5d33877f786a3942677806c5b',1,'bc::BC_cuda_assert(cudaError_t code, const char *file, const char *function, int line)'],['../namespacebc.html#ae3bc34767cd244414df270a9cb1b558e',1,'bc::BC_cuda_assert(cublasStatus_t code, const char *file, const char *function, int line)']]],
  ['bc_5fget_5fclassname_5fof',['bc_get_classname_of',['../namespacebc.html#a10d0367c3c2e10f3f7c5d4f8b37c5270',1,'bc']]],
  ['bc_5fif_5fcuda',['BC_IF_CUDA',['../namespacebc_1_1algorithms.html#a1fca691445bcc8682def79b07442d781',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto for_each(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::for_each(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#acbea96c6be1f3640ba2a0c16762f8518',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto count(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::count(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a2527ffbb014b4d45d414b3632b05df4f',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto count_if(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::count_if(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#acbb5455c8fe9c5f9e530bab556b50351',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto find(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::find(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#af89c40742157456b78d3c5890c71decb',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto find_if(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::find_if(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a56b897a6a517f83757f23acd2ea8e909',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto find_if_not(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::find_if_not(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#aa9d173a186c6e2baa71cc25153bf43ba',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto copy(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::copy(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a2bbbed92b3cca0cffb91f0c7239eeee7',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto copy_if(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::copy_if(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a161e599f5cf14530122981793708e331',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto copy_n(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::copy_n(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a6cf62203967e416b6c0e90403797c478',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto fill(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::fill(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#ace471eaeb93b9d31899320949f0dea7e',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto fill_n(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::fill_n(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#abc433ba5300c35144928062a6adad131',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto transform(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::transform(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a00fdd407b1bd98ee4fcf0deb88eeb2f9',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto generate(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::generate(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a0ead3fbb16c6bd61241ddc8b9cd3082d',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto generate_n(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::generate_n(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#ae0682a09ecb1a1c4b35f51b8ec5fb122',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto replace(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::replace(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#af8931991c0bc424294f11e10b21bc2c3',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto replace_if(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::replace_if(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#aa27e90d868575b1233c25545ab5ba093',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto replace_copy(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::replace_copy(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#aadf2e327b8cb70c815253989d38f4e4f',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto replace_copy_if(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::replace_copy_if(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a47e1b1106d9aa8d3e55064143957af4a',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto swap(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::swap(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a2919a40c80751a424661748ebd0b3884',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto swap_ranges(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::swap_ranges(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#af284529916bb84a5144b4f616f35de0f',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto reverse(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::reverse(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a3a26792cd5c28bc9b78db4214670103a',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto reverse_copy(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::reverse_copy(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a37c8c1c3f5100026d63c022dcc5f26a9',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto is_sorted(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::is_sorted(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a3284ffc9b6592ebae025026a49b934ef',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto is_sorted_until(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::is_sorted_until(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#adab5c8ffaca0db90c63b1ef77019fb5f',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto sort(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::sort(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a22a806056dfc049cc3fd8612c6459f21',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto stable_sort(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::stable_sort(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#a9ba98264154ac75b0f8fadf3fbcac557',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto max(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { static_assert(std::is_same&lt; std::random_access_iterator_tag, typename Begin::iterator_category &gt;::value, &quot;Assert random_access_iterator_tag&quot;);return thrust::max(thrust::cuda::par.on(stream), &amp;*begin, &amp;*end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#aac8a9a31f5b60dd618dd3c6ba37b1d5f',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto max_element(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { static_assert(std::is_same&lt; std::random_access_iterator_tag, typename Begin::iterator_category &gt;::value, &quot;Assert random_access_iterator_tag&quot;);return thrust::max_element(thrust::cuda::par.on(stream), &amp;*begin, &amp;*end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#aafcccde499f184a209e8dafe7441be9f',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto min(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { static_assert(std::is_same&lt; std::random_access_iterator_tag, typename Begin::iterator_category &gt;::value, &quot;Assert random_access_iterator_tag&quot;);return thrust::min(thrust::cuda::par.on(stream), &amp;*begin, &amp;*end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#aa283dc889b39fdce83ca44ad0f5f411f',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto min_element(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { static_assert(std::is_same&lt; std::random_access_iterator_tag, typename Begin::iterator_category &gt;::value, &quot;Assert random_access_iterator_tag&quot;);return thrust::min_element(thrust::cuda::par.on(stream), &amp;*begin, &amp;*end, args...);}) template&lt; class Begin'],['../namespacebc_1_1algorithms.html#abc8e0fa774625ec682265e98e18b5283',1,'bc::algorithms::BC_IF_CUDA(template&lt; class Begin, class End, class... Args &gt; static auto minmax_element(bc::streams::Stream&lt; bc::device_tag &gt; stream, Begin begin, End end, Args... args) { return thrust::minmax_element(thrust::cuda::par.on(stream), begin, end, args...);}) template&lt; class Begin']]],
  ['begin',['begin',['../structbc_1_1algorithms_1_1ReferenceList.html#af26b51906d89718a1b0056bb48788df9',1,'bc::algorithms::ReferenceList::begin()'],['../structbc_1_1io_1_1Range.html#a85bcc088b706f383bc0bf9b3217a04ff',1,'bc::io::Range::begin()'],['../structbc_1_1Dim.html#ad382835256ceedd117733b1676a6bd3e',1,'bc::Dim::begin() const'],['../structbc_1_1Dim.html#a6bb6f0694071dbb84f9f65d419a55b01',1,'bc::Dim::begin()'],['../structbc_1_1tensors_1_1Expression__Base_1_1cw__iterator__type.html#a7303de5723b603749a3080c432d0c822',1,'bc::tensors::Expression_Base::cw_iterator_type::begin()'],['../structbc_1_1tensors_1_1Expression__Base_1_1cw__reverse__iterator__type.html#a71888e4e6761b480dd6e69a95914bd5e',1,'bc::tensors::Expression_Base::cw_reverse_iterator_type::begin()'],['../classbc_1_1tensors_1_1Tensor__Base.html#a180c98868c31934da3caa17e560fe941',1,'bc::tensors::Tensor_Base::begin() const'],['../classbc_1_1tensors_1_1Tensor__Base.html#ac1cde08ed6a10c4f714cceb63c95b5e2',1,'bc::tensors::Tensor_Base::begin()'],['../structbc_1_1tensors_1_1Tensor__Base_1_1nd__iterator__type.html#a430ba9b782f52539459544676f369e36',1,'bc::tensors::Tensor_Base::nd_iterator_type::begin()'],['../structbc_1_1tensors_1_1Tensor__Base_1_1nd__reverse__iterator__type.html#a66af3325cca78f481f612ca6bbae1b05',1,'bc::tensors::Tensor_Base::nd_reverse_iterator_type::begin()'],['../classbc_1_1utility_1_1Any__Map.html#a2140500f599708a2eac39a6736df0c40',1,'bc::utility::Any_Map::begin() const'],['../classbc_1_1utility_1_1Any__Map.html#a10ee269a7bb8dc9ddf1476042a2b3eab',1,'bc::utility::Any_Map::begin()']]],
  ['bi_5fexpr',['bi_expr',['../classbc_1_1tensors_1_1Expression__Base.html#a0e70418adb3e28d3f7ec5e8059d0fdbe',1,'bc::tensors::Expression_Base::bi_expr()'],['../expression__operations_8h.html#a2f299aa904d47a5433b959da14e46fbb',1,'bi_expr():&#160;expression_operations.h']]],
  ['bin_5fop',['Bin_Op',['../structbc_1_1tensors_1_1exprs_1_1Bin__Op.html#a573cf3bb0dda167af2e6ca585c584fd9',1,'bc::tensors::exprs::Bin_Op::Bin_Op()'],['../structbc_1_1tensors_1_1exprs_1_1Bin__Op_3_01oper_1_1dot_3_01SystemTag_01_4_00_01lv_00_01rv_01_4.html#a9078278be7946d741f995f564ef3885e',1,'bc::tensors::exprs::Bin_Op&lt; oper::dot&lt; SystemTag &gt;, lv, rv &gt;::Bin_Op()'],['../structbc_1_1tensors_1_1exprs_1_1Bin__Op_3_01oper_1_1gemm_3_01SystemTag_01_4_00_01lv_00_01rv_01_4.html#a14fe919a96786af35cc1e9b4bcf59d7c',1,'bc::tensors::exprs::Bin_Op&lt; oper::gemm&lt; SystemTag &gt;, lv, rv &gt;::Bin_Op()'],['../structbc_1_1tensors_1_1exprs_1_1Bin__Op_3_01oper_1_1gemv_3_01SystemTag_01_4_00_01lv_00_01rv_01_4.html#adc4a8b309f32fb758e2463600050d462',1,'bc::tensors::exprs::Bin_Op&lt; oper::gemv&lt; SystemTag &gt;, lv, rv &gt;::Bin_Op()'],['../structbc_1_1tensors_1_1exprs_1_1Bin__Op_3_01oper_1_1ger_3_01SystemTag_01_4_00_01lv_00_01rv_01_4.html#ad3441252cab02823f05fad5bc2731ee2',1,'bc::tensors::exprs::Bin_Op&lt; oper::ger&lt; SystemTag &gt;, lv, rv &gt;::Bin_Op()']]],
  ['bind',['Bind',['../structbc_1_1traits_1_1Bind.html#a1969900854a26d59661d5b9c159d7fc4',1,'bc::traits::Bind::Bind()'],['../namespacebc_1_1traits.html#aec399a77e3255fad556ea6ed08f792d0',1,'bc::traits::bind()']]],
  ['bp',['bp',['../structbc_1_1nn_1_1Polymorphic__Layer__Base.html#a317faf7f621b09947ac22385d26e61e4',1,'bc::nn::Polymorphic_Layer_Base::bp(const batched_output_tensor_type &amp;delta)'],['../structbc_1_1nn_1_1Polymorphic__Layer__Base.html#a317faf7f621b09947ac22385d26e61e4',1,'bc::nn::Polymorphic_Layer_Base::bp(const batched_output_tensor_type &amp;delta)']]],
  ['bracket_5fwrap',['bracket_wrap',['../structbc_1_1tensors_1_1io_1_1features.html#a95d5d59f0e760068f8bb0845677659f8',1,'bc::tensors::io::features']]]
];
